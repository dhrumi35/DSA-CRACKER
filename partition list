https://leetcode.com/problems/partition-list/
input: 1-> 4-> 3-> 2-> 5-> 2  where x =3
output: 1-> 2-> 2-> 4-> 3-> 5
[* WHEN EVER SUCH TYPE OF QUESTIONS IS ASKED IN INTERVIEW 1ST SOLUTION U HAVE TO GIVE IS BRUTE FORCE SOLUTION *]

# Brute force solution: heap
TAKE  a heap data structure a max heap or min heap comapre it with the x or the target value 
and return the resultant output
The TIME COMLEXITY :- O(n) and SPACE COMPLEXITY :- O(n)

[*The interviewer wont like the extra sapce that we hae used so lets go to the optimal approch *]

# OPYIMAL APPROCH 
They have given us the list ie., 1-> 4-> 3-> 5-> 2
lets break this in small and high with the given target value 
small = 1-> 2-> 2
high = 4-> 3-> 5
then we would connect small and high 

the TIME COMPLEXITY :- O(n) and SPACE COMPLEXITY:O(1)

# JAVA CODE 
class Solution {
    public ListNode partition(ListNode head, int x) {
        // assign to 1st element 
        ListNode small = new ListNode(0);
        ListNode higher = new ListNode(0);
        // make it as a head 
        ListNode smallHead = small, higherHead=higher;
        // start traversing 
        //1st check the condition that the head is not null
        while(head!=null){
            // if the value of head is smaller then the given x or target 
            if(head.val<x){
                // make a list of smaller elements 
                smallHead.next =head ;
                smallHead = smallHead.next;
            } 
             else{
                 // make a list of higher elements 
                 higherHead.next=head;
                 higherHead=higherHead.next;
             }
            
             head=head.next;
        } // we have to merge both the smaller and higher list so we assigned higher last element to the null and joined smaller and higher heads 
        higherHead.next =null;
          smallHead.next=higher.next;
         
        return small.next;
    }
}
